# Access via MACRO_IMPORT bytecodemanipulation.standard_library
# and than either CALL MACRO std:..., or for macros marked with ASSEMBLY, directly with std:...


NAMESPACE std
{

    # Wrapper around the print builtin
    MACRO ASSEMBLY print(text VARIABLE_ARG)
    {
        CALL @print (*§text)
        POP
    }

    # Wrapper around the input builtin
    MACRO ASSEMBLY input(result VARIABLE, text VARIABLE_ARG)
    {
        CALL @input (*§text) -> §result
    }

    # Requires OP with single argument to work
    # MACRO ASSEMBLY check_type(expected_type, value, error_message)
    # {
    #     CALL @isinstance(§value, §expected_type) -> $MACRO_result
    #     OP not $MACRO_result -> $MACRO_result
    #     IF $MACRO_result
    #     {
    #         CALL @ValueError(§error_message)
    #         RAISE
    #     }
    # }

}
