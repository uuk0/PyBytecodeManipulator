# Access via MACRO_IMPORT bytecodemanipulation.standard_library
# and than either CALL MACRO std:..., or for macros marked with ASSEMBLY, directly with std:...


NAMESPACE std
{
    # Wrapper around the input builtin
    MACRO ASSEMBLY input(result VARIABLE, text VARIABLE_ARG)
    {
        CALL ~input (*&text) -> &result
    }

    MACRO ASSEMBLY check_type(expected_type, value, error_message)
    {
        IF OP (not ~isinstance(&value, &expected_type))
        {
            RAISE ~ValueError(&error_message)
        }
    }

    MACRO ASSEMBLY check_type(expected_type, value)
    {
        check_type(&expected_type, &value, OP ("Invalid type, expected " + ~repr(&value)))
    }

    NAMESPACE os
    {
        MACRO ASSEMBLY file_walker(directory, file VARIABLE, code CODE_BLOCK)
        {
            CALL ~os.!listdir(&directory) -> $files

            LOAD 0 -> $counter
            CALL ~len($files) -> $file_count

            WHILE OP ($counter < $file_count)
            {
                LOAD $files[$counter] -> &file
                OP $counter + 1 -> $counter

                IF ~os.!path.!isfile(&file)
                {
                    MACRO_PASTE &code
                }
            }
        }
    }

    NAMESPACE comprehension
    {
        MACRO ASSEMBLY generator(iterable, code CODE_BLOCK[1]) -> ANY
        {
            DEF inner<&iterable>(iter_obj)
            {
                LOAD ~list() -> $result
                FOREACH $var IN ยง&iterable
                {
                    MACRO_PASTE code [$var]
                    YIELD %
                }
                RETURN $result
            }

            MACRO_RETURN $inner(&iterable)
        }

        MACRO ASSEMBLY list(iterable, code CODE_BLOCK[1]) -> ANY
        {
            generator(&iterable, &code) -> $result
            RETURN ~list($result)
        }

        MACRO ASSEMBLY set(iterable, code CODE_BLOCK[1]) -> ANY
        {
            generator(&iterable, &code) -> $result
            RETURN ~set($result)
        }

        MACRO ASSEMBLY tuple(iterable, code CODE_BLOCK[1]) -> ANY
        {
            generator(&iterable, &code) -> $result
            RETURN ~tuple($result)
        }

        MACRO ASSEMBLY dict(iterable, key CODE_BLOCK[1], value CODE_BLOCK[1]) -> ANY
        {
            generator(&iterable, &key) -> $keys
            generator(&iterable, &value) -> $values
            RETURN ~dict(~zip($keys, $values))
        }
    }

    NAMESPACE stream
    {
        MACRO ASSEMBLY initialize(var VARIABLE)
        {
            LOAD ~list() -> &var
        }

        MACRO ASSEMBLY extend(var VARIABLE, value)
        {
            CALL &var.extend(&value) -> \
        }

        MACRO ASSEMBLY filter(var VARIABLE, predicate CODE_BLOCK[1])
        {
            DEF filtered(item)
            {
                MACRO_PASTE predicate [$item]
                RETURN %
            }

            LOAD &var.copy() -> $tmp
            CALL &var.clear() -> \
            CALL &var.extend(~filter($filtered, $tmp)) -> \
        }

        MACRO ASSEMBLY map(var VARIABLE, predicate CODE_BLOCK[1])
        {
            DEF mapping(item)
            {
                MACRO_PASTE predicate [$item]
                RETURN $item
            }

            LOAD &var.copy() -> $tmp
            CALL &var.clear() -> \
            CALL &var.extend(~map($mapping, $tmp)) -> \
        }

        MACRO ASSEMBLY reduce(var VARIABLE, reducer CODE_BLOCK[2])
        {
            IF OP (~len(&var) == 0)
            {
                RETURN -1
            }

            LOAD &var[0] -> $tmp

            LOAD 1 -> $index
            LOAD ~len(&var) -> $max_size

            WHILE OP ($index < $max_size)
            {
                MACRO_PASTE &reducer [$tmp, &var[$index]] -> $tmp
                OP $index + 1 -> $index
            }

            LOAD $tmp
        }

        MACRO ASSEMBLY reduce(var VARIABLE, reducer CODE_BLOCK[2], start)
        {
            IF OP (~len(&var) == 0)
            {
                RETURN &start
            }

            LOAD &start -> $tmp

            LOAD 0 -> $index
            LOAD ~len(&var) -> $max_size

            WHILE OP ($index < $max_size)
            {
                MACRO_PASTE &reducer [$tmp, &var[$index]] -> $tmp
                OP $index + 1 -> $index
            }

            LOAD $tmp
        }

        MACRO ASSEMBLY grouped(var VARIABLE, group_size, code CODE_BLOCK[1])
        {
            ASSERT_STATIC OP (&group_size instanceof ~int)

            IF OP (~len(&var) == 0)
            {
                RETURN &var
            }

            LOAD ~list() -> $result

            FOREACH $i IN ~range(OP (~len(&var) // &group_size))
            {
                LOAD &var[~slice(OP ($i * &group_size), OP (OP ($i + 1) * &group_size))] -> $frag

                MACRO_PASTE &code [$frag]
                CALL $result.append($frag) -> \
            }

            CALL &var.clear() -> \
            CALL &var.extend($result) -> \
        }

        MACRO ASSEMBLY grouped(var VARIABLE, group_size)
        {
            std:stream:grouped(&var, &group_size, [$_] {})
        }

        MACRO ASSEMBLY to_list(var VARIABLE, output VARIABLE)
        {
            LOAD ~list(&var) -> &output
        }
    }
}
